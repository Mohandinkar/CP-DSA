
This Java program implements a binary search algorithm to find a target value in a rotated sorted array in O(log n) time complexity. The search method initializes two pointers, start and end, to define the search range. In each iteration, it calculates the middle index (mid) and checks if nums[mid] matches the target. If not, it determines which half of the array is sorted. If the left half is sorted (nums[start] <= nums[mid]), it checks whether the target lies within that range and updates the search bounds accordingly. Otherwise, if the right half is sorted, it checks whether the target is within that range and adjusts start or end. The loop continues until the target is found or the search range is exhausted, returning -1 if the target is not present
